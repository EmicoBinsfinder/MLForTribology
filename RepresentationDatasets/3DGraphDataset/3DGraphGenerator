import numpy as np
import pandas as pd
import json
from rdkit import Chem
from rdkit.Chem import AllChem, rdMolTransforms

def smiles_to_graph(smiles, properties):
    mol = Chem.MolFromSmiles(smiles)
    mol = Chem.AddHs(mol)
    
    try:
        AllChem.EmbedMolecule(mol, useRandomCoords=True)
        AllChem.MMFFOptimizeMolecule(mol)
    except ValueError:
        print(f"Warning: Failed to optimize molecule for SMILES: {smiles}")
        return None
    
    conf = mol.GetConformer()
    atom_coords = {atom.GetIdx(): np.array(conf.GetAtomPosition(atom.GetIdx())) for atom in mol.GetAtoms()}
    
    # Compute molecular center
    molecule_center = np.mean(list(atom_coords.values()), axis=0)
    
    atom_features = []
    mmff_props = AllChem.MMFFGetMoleculeProperties(mol)
    for atom in mol.GetAtoms():
        atom_idx = atom.GetIdx()
        distance_from_center = np.linalg.norm(atom_coords[atom_idx] - molecule_center)
        steric_hindrance = sum(np.linalg.norm(atom_coords[atom_idx] - atom_coords[nbr.GetIdx()]) for nbr in atom.GetNeighbors()) / atom.GetDegree()
        
        atom_features.append({
            "atomic_number": atom.GetAtomicNum(),
            "degree": atom.GetDegree(),
            "valence": atom.GetTotalValence(),
            "formal_charge": atom.GetFormalCharge(),
            # "hybridization": str(atom.GetHybridization()),
            "aromatic": atom.GetIsAromatic(),
            "mmff94_partial_charge": mmff_props.GetMMFFPartialCharge(atom_idx),
            # "3D_coordinates": atom_coords[atom_idx].tolist(),
            "distance_from_center": distance_from_center,
            "steric_hindrance": steric_hindrance
        })
    
    edge_features = []
    for bond in mol.GetBonds():
        start, end = bond.GetBeginAtomIdx(), bond.GetEndAtomIdx()
        bond_length = np.linalg.norm(atom_coords[start] - atom_coords[end])
        
        # Compute bond angles
        neighbors_start = [nbr.GetIdx() for nbr in mol.GetAtomWithIdx(start).GetNeighbors() if nbr.GetIdx() != end]
        bond_angles = [
            rdMolTransforms.GetAngleRad(conf, n, start, end) for n in neighbors_start
        ] if neighbors_start else [None]
        
        # Compute dihedral (torsion) angles
        neighbors_end = [nbr.GetIdx() for nbr in mol.GetAtomWithIdx(end).GetNeighbors() if nbr.GetIdx() != start]
        torsion_angles = [
            rdMolTransforms.GetDihedralRad(conf, n, start, end, m) for n in neighbors_start for m in neighbors_end
        ] if neighbors_start and neighbors_end else [None]
        
        edge_features.append({
            "begin_atom_idx": start,
            "end_atom_idx": end,
            "bond_type": str(bond.GetBondType()),
            "is_conjugated": bond.GetIsConjugated(),
            "is_aromatic": bond.GetIsAromatic(),
            "is_in_ring": bond.IsInRing(),
            "bond_length": bond_length,
            "bond_angles": bond_angles,
            "torsion_angles": torsion_angles
        })
    
    return {"nodes": atom_features, "edges": edge_features, "global_properties": properties}

# Load dataset
file_path = "TransformedDataset.csv"  # Replace with actual file path
df = pd.read_csv(file_path)

graph_data = []
for _, row in df.iterrows():
    smiles = row["SMILES"]
    properties = {
        "Thermal_Conductivity_40C": row.get("Thermal_Conductivity_40C", float('nan')),
        "Thermal_Conductivity_100C": row.get("Thermal_Conductivity_100C", float('nan')),
        "Density_40C": row.get("Density_40C", float('nan')),
        "Density_100C": row.get("Density_100C", float('nan')),
        "Viscosity_40C": row.get("Viscosity_40C", float('nan')),
        "Viscosity_100C": row.get("Viscosity_100C", float('nan')),
        "Heat_Capacity_40C": row.get("Heat_Capacity_40C", float('nan')),
        "Heat_Capacity_100C": row.get("Heat_Capacity_100C", float('nan'))
    }

    graph = smiles_to_graph(smiles, properties)
    if graph:
        molecule_entry = {
            "smiles": smiles,
            "graph": graph
        }
        graph_data.append(molecule_entry)


# Save dataset as JSON
json_file_path = "MolecularGraphDataset.json"
with open(json_file_path, "w") as f:
    json.dump(graph_data, f, indent=4)

print(f"Dataset saved to {json_file_path}")



# import json
# import plotly.graph_objects as go
# import networkx as nx

# # Load the JSON file with 3D molecular graphs
# json_path = '3D_Molecular_Graphs.json'

# with open(json_path, 'r') as f:
#     molecular_graphs = json.load(f)

# # Select an example graph (e.g., the first graph in the dataset)
# example_graph_data = molecular_graphs[345]["graph"]  # Adjust index to select a different graph
# example_properties = molecular_graphs[345]["properties"]

# # Atom properties for colors and sizes
# ATOM_COLORS = {
#     1: 'white',  # Hydrogen
#     6: 'gray',   # Carbon
#     7: 'blue',   # Nitrogen
#     8: 'red',    # Oxygen
#     16: 'yellow' # Sulfur
# }

# ATOM_RADII = {
#     1: 5,  # Hydrogen
#     6: 10, # Carbon
#     7: 12, # Nitrogen
#     8: 12, # Oxygen
# }

# # Bond colors based on bond type
# BOND_COLORS = {
#     'SINGLE': 'gray',
#     'DOUBLE': 'blue',
#     'TRIPLE': 'red',
#     'AROMATIC': 'green'
# }

# def plot_3d_molecular_graph(graph_data, title="3D Molecular Graph"):
#     # Convert node-link data back to a NetworkX graph
#     graph = nx.node_link_graph(graph_data)
    
#     # Prepare node data
#     node_x = []
#     node_y = []
#     node_z = []
#     node_colors = []
#     node_sizes = []
#     node_text = []  # Hover text for nodes

#     for node, data in graph.nodes(data=True):
#         node_x.append(data['x'])
#         node_y.append(data['y'])
#         node_z.append(data['z'])
#         atomic_num = data['atomic_num']
#         node_colors.append(ATOM_COLORS.get(atomic_num, 'black'))  # Default to black for unknown atoms
#         node_sizes.append(ATOM_RADII.get(atomic_num, 8))  # Default size if unknown atom type
#         node_text.append(
#             f"Atomic Number: {atomic_num}<br>"
#             f"Hybridization: {data['hybridization']}<br>"
#             f"Charge: {data['formal_charge']}"
#         )

#     # Prepare edge data
#     edge_x = []
#     edge_y = []
#     edge_z = []
#     edge_colors = []  # Colors for different bond types
#     edge_text = []    # Hover text for edges

#     for u, v, data in graph.edges(data=True):
#         x0, y0, z0 = graph.nodes[u]['x'], graph.nodes[u]['y'], graph.nodes[u]['z']
#         x1, y1, z1 = graph.nodes[v]['x'], graph.nodes[v]['y'], graph.nodes[v]['z']
#         edge_x += [x0, x1, None]
#         edge_y += [y0, y1, None]
#         edge_z += [z0, z1, None]
#         bond_type = data.get('bond_type', 'UNKNOWN')
#         edge_colors.append(BOND_COLORS.get(bond_type, 'black'))  # Default to black for unknown bond types
#         edge_text.append(f"Bond Type: {bond_type}")

#     # Create Plotly traces
#     edge_trace = go.Scatter3d(
#         x=edge_x,
#         y=edge_y,
#         z=edge_z,
#         mode='lines',
#         line=dict(width=2, color='gray'),  # Default color; we'll assign bond-specific colors below
#         hoverinfo='none'  # Hover info not typically shown for edges
#     )

#     # Add colors for edges
#     edge_trace.marker = dict(color=edge_colors, opacity=0.7)

#     node_trace = go.Scatter3d(
#         x=node_x,
#         y=node_y,
#         z=node_z,
#         mode='markers',
#         marker=dict(
#             size=node_sizes,
#             color=node_colors,
#             opacity=0.8,
#             line=dict(color='darkblue', width=1)
#         ),
#         text=node_text,
#         hoverinfo='text'  # Display hover info only
#     )

#     # Create the figure
#     fig = go.Figure(
#         data=[edge_trace, node_trace],
#         layout=go.Layout(
#             title=title,
#             scene=dict(
#                 xaxis_title='X',
#                 yaxis_title='Y',
#                 zaxis_title='Z',
#                 xaxis=dict(showbackground=False),
#                 yaxis=dict(showbackground=False),
#                 zaxis=dict(showbackground=False)
#             ),
#             margin=dict(l=0, r=0, b=0, t=40)
#         )
#     )

#     fig.show()

# # Plot the selected graph
# plot_3d_molecular_graph(example_graph_data, title="3D Molecular Graph with Atom/Bond Properties")

# # Print associated properties
# print("Properties of the selected graph:")
# for key, value in example_properties.items():
#     print(f"{key}: {value}")
